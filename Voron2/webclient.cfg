## Mainsail klipper macro definitions
##
## Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
##
## This file may be distributed under the terms of the GNU GPLv3 license

## Version 2.0

## add [include mainsail.cfg] to your printer.cfg

## Customization:
## copy the following macro to your printer.cfg (outside of mainsail.cfg)

#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos  : False ; use custom park coordinates for x,y [True/False] 
#variable_custom_park_x   : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y   : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz  : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
#variable_retract         : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract  : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract   : 35.0  ; retract speed in mm/s
#variable_unretract       : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract : 35.0  ; unretract speed in mm/s
#variable_speed_hop       : 15.0  ; z move speed in mm/s
#variable_speed_move      : 100.0 ; move speed in mm/s
#variable_park_at_cancel  : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
#gcode:

## After you uncomment it add your custom values

## You now can use your PAUSE macro direct in your M600 here a short example:

#[gcode_macro M600]
#description: Filament change
#gcode: PAUSE X=10 Y=10 Z_MIN=50

## That will park your head front left with a minimum hight of 50mm above the bed. If your head
## is already above 50mm it will use only the z_hop specified with dz.

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_executed: False
gcode:
	SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=executed VALUE=True
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
	CLEAR_PAUSE ; Clear pause state as this one is canceled and pause state not longer relevant
	PRINT_END
	M106 S0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
	{% set printer_variables = printer['gcode_macro _PRINTER_VARIABLES'] %}
	{% set z_hop = printer_variables.general.default_z_hop %}

	# Check if a PAUSE command has been executed without a corresponding RESUME
	{% if printer['pause_resume'].is_paused == False %}
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=z_hop VALUE={z_hop}
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extruder_temp VALUE={printer['extruder'].target}
		SFS_DISABLE ; Disable filament sensor for unloading and loading the filament
		SAVE_GCODE_STATE NAME=PAUSE ; Safe macro position for RESUME macro
		PAUSE_BASE

		{% if (printer.gcode_move.position.z + z_hop) < printer.toolhead.axis_maximum.z %} ; check that zhop doesn't exceed z max
			G91 ; relative positioning
			G1 Z{z_hop} F{printer_variables.speed.travel_speed_z} ; raise Z up by z hop amount
		{% else %}
			# z_hop would exceed the maximum travel in z. Display this info. Set z_hop to 0 for resume macro as we will perform no z_hop.
			_PRINT_AR TEXT="Pause zhop exceeds maximum Z height."
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=z_hop VALUE=0 
		{% endif %}

		G90 ; Absolute positioning
		G1 X{printer_variables.positions.park_front_middle.x} Y{printer_variables.positions.park_front_middle.y} F{printer_variables.speed.travel_speed_xy}   ; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
		M104 S0 ; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200 ; set timeout to 12 hours
	{% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_z_hop: 0
variable_extruder_temp: 0
gcode:
    {% set printer_variables = printer['gcode_macro _PRINTER_VARIABLES'] %}
	{% set e = params.E|default(2.5)|int %} ; hotend prime amount (in mm)
	
	{% if printer['pause_resume'].is_paused == True %}
		SFS_ENABLE ; Enable filament runout sensor again as print will continue
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
		
		{% if extruder_temp|int > 0 %}
			M109 S{extruder_temp|int} ; wait for hotend to heat back up
		{% endif %}

		# go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED={(printer_variables.speed.safe_movement/60)}

		G91 ; Relative movement
		M83 ; Relative extruder movement

		# Move back down and prime the nozzle (if extruder hot enough)
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
			G1 Z{z_hop * -1} E{e} F{printer_variables.speed.travel_speed_z} ; prime nozzle by E, lower Z back down
		{% else %}
			G1 Z{z_hop * -1} F{printer_variables.speed.travel_speed_z} ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
		{% endif %}

		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED={(printer_variables.speed.safe_movement/60)} ; restore print position
		RESUME_BASE ; resume print
	{% endif %}
