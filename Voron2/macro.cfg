#####################################################################
#   Macros
#####################################################################
#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _PRINTER_VARIABLES

[gcode_macro G32]
gcode:
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	G28
	QUAD_GANTRY_LEVEL
	G28
	G0 X125 Y125 Z30 F3600
	RESTORE_GCODE_STATE NAME=STATE_G32

# Use PRINT_START in the slicer
# Params of PRINT_START:
# BED_TEMP: Target temparatur of the heated bed
# EXTRUDER_TEMP: Target temperatur of the extruder
[gcode_macro PRINT_START]
description: Contains all commands before starting a print
variable_var: {'temp'        : {'extruder': 235.0, 'bed': 100.0, 'chamber': 40.0},
			   'delta'       : {'chamber': 5.0, 'bed': 10},
			   'time'        : {'soak' : 1800, 'soak_extra': 300},
			   'redo_qgl'    : True}
## Valid states
##   Prepare    : Store Params
##   HeatBed    : heat up bed and decide if soak is needed 
##   HeatSoak   : loop the time specified with SOAK
##   Chamber    : decide if extra soak is needed
##   ChamberSoak: loop the time specified with EXTRA_SOAK or Chamber target reached
##   Final      : all what needs to be done after wait time
variable_state: 'Prepare'
gcode:
	{% set printer_variables = printer['gcode_macro _PRINTER_VARIABLES'] %}
	

	


	
	

	G28 # Home all axis for nozzle cleaning
	_CLEAN_NOZZLE # Clean nozzle before starting real homing

	G32                            ; home all axes and qgl
	BED_MESH_CALIBRATE ; Create a bed mesh

	G90                            ; absolute positioning

	M107 ; Turn off fans
	M109 S{hotend_temp}	; Prehet extruder but keep temp low to not ooze
	M190 S{bed_temp} ; Set bed temp but dont wait

	PRIME_LINE

	##############################  Prepare phase only done at the first exection of PRINT_START  ##############################
	{% if state == 'Prepare' %}
		{% set var = {'temp': {'hotend': params.HOTEND_TEMP|default(235)|float|round(1),
							   'bed'     : params.BED_TEMP|default(100)|float|round(1),
							   'chamber' : params.CHAMBER_TEMP|default(50)|float|round(1)},
				  	  'delta': {'chamber': params.DELTA_C|default(5)|float|round(1), 
								'bed'    : params.DELTA_B|default(10)|float|round(1)},
				  	  'time' : {'soak'      : params.SOAK|default(30)|int * 60,
								'soak_extra': params.CHAMBER_SOAK|default(5)|int * 60},
					  'redo_qgl' : True} %}

		_HEATER_ON ; Use helper function to turn on heated bed relay

		G21 ; set units to millimeters
		G90 ; use absolute coordinates

		G0 Z{printer_variables.positions.bed_center_low.z} F{printer_variables.speed.travel_speed_z} ; move nozzle to z high first
		G0 X{printer_variables.positions.bed_center_low.x} Y{printer_variables.positions.bed_center_low.y} F{printer_variables.speed.travel_speed_xy} ; home to get toolhead in the middle

		PAUSE_BASE ; Saves gcode state and pauses virtualsd from reading more gcode

		SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
		SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=executed VALUE=False
		SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatBed"'
		UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5

	##############################  HeatBed Phase heat up the bed  ##############################    
	{% elif state == 'HeatBed' %}
		{% if (var.time.soak <= 0) or (actBed >= targetBed) %}  ; check if soak time is 0 or if the bed is still hot
			M117 Heating Hotend

			M140 S{var.temp.bed} ; Heat bed to target temp
			M109 S{var.temp.hotend-50} ; Heat hotend to target temp
			M190 S{var.temp.bed} ; Heat bed to target temp

			SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
			UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
		{% else %}
			M117 Heating Bed

			M106 S90              ; switch part cooling ~35% to move air in chamber
			M140 S{var.temp.bed}       ; heat bed

			SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'

			UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={var.time.soak} # TODO
		{% endif%}

	##############################  Heatsoak Phase call the delay macro until time is over  ##############################
	{% elif state == 'HeatSoak' %}

	##############################  Decide if extended soaking is needed  ##############################
	{% elif state == 'Chamber' %}

	############################## extra Heat Soak terminated by chamber temp  ##############################
	{% elif state == 'ChamberSoak' %}

	##############################  all whats need to run at the end  ##############################
	{% elif state == 'Final' %}

	{% endif %}

[delayed_gcode _START_PRINT_WAIT]
gcode:
  	{% macro print_time(text, time) %} ; Define macro for printing the remaining time
		M117 {'%s' % text} {(time|int // 60)}:{'%02d' % (time|int % 60)}
  	{% endmacro %}

	# Inform user about remaining time
  	{% if printer['gcode_macro PRINT_START'].state == 'HeatSoak'%}
   		{ print_time("HEAT SOAK", printer['gcode_macro PRINT_START'].var.time.soak) }
  	{% elif printer['gcode_macro PRINT_START'].state == 'ChamberSoak' %}
		{ print_time("SOAK", printer['gcode_macro PRINT_START'].var.time.soak_extra) }
  	{% endif %}

  	# Check CANCEL_PRINT was executed
  	{% if printer['gcode_macro CANCEL_PRINT'].execute|lower == 'false' %}
		PRINT_START  ; Junp back to PRINT_START
  	{% else %} ; break loop and insure state is correct for the next print start
		SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
		SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
	{% endif %}

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
	M400                           ; wait for buffer to clear
	G92 E0                         ; zero the extruder
	G1 E-25 F1800                ; retract filament
	G91                            ; relative positioning
	G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
	TURN_OFF_HEATERS
	M107                           ; turn off fan
	G1 Z2 F3000                    ; move nozzle up 2mm
	G90                            ; absolute positioning
	G0  X125 Y250 F3600            ; park nozzle at rear
	BED_MESH_CLEAR

	_HEATER_OFF ; Turn off the relay for the heated bed immediatly after the print

[gcode_macro M900]
description: Set pressure advance
gcode:
	SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

# For reference see https://github.com/VoronDesign/VoronUsers/blob/master/orphaned_mods/printer_mods/edwardyeeks/Decontaminator_Purge_Bucket_%26_Nozzle_Scrubber/Macros/nozzle_scrub.cfg
[gcode_macro _CLEAN_NOZZLE]
variable_wipe_quantity: 5

# Start position on the x axis of the printer
variable_brush_x_start: 25
# Length of the wiping motion through the brush. It should be longer than the brush plus the offset to the brush_x_start position
variable_wipe_motion_length: 50

# Top of the brush is at an absolute z height of the value
variable_brush_top: 3.4
# Clearance for the travelmove to the bucket in z
variable_clearance_z: 10
# Height of how much the nozzle should be plunged into the brush
variable_plunge_height: 2

# Speeds
variable_travel_speed_xy: 3000 # Travel speed to the brush in x and y
variable_travel_speed_z: 1500 # Travel speed to the brush in z
variable_wipe_speed_xy: 5000 # Wipe speed for the left right motion 


gcode:
	# First, check if the axes are homed.
	{% if "xyz" in printer.toolhead.homed_axes %}
		## Save the gcode state in this macro instance.
		SAVE_GCODE_STATE NAME=clean_nozzle

		# Set to absolute positioning.
		G90

		# Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
		{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

		# Move up to clear travel height
		G1 Z{brush_top + clearance_z} F{travel_speed_z}

		# Move toolhead back to y location of the nozzle brush
		G1 Y{Ry} F{travel_speed_xy}

		# Move to x start position of the brushing motion
		G1 X{brush_x_start} F{travel_speed_xy}

		## Move nozzle down into brush.
		G1 Z{brush_top - plunge_height} F{travel_speed_z}

		## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
		{% for wipes in range(1, wipe_quantity) %}
			G1 X{brush_x_start + wipe_motion_length} F{wipe_speed_xy}
			G1 X{brush_x_start} F{wipe_speed_xy}
		{% endfor %}

		## Clear from area.
		M117 Nozzle cleaned!
		G1 Z{brush_top + clearance_z} F{travel_speed_z}
		
		## Restore the gcode state to how it was before the macro.
		RESTORE_GCODE_STATE NAME=clean_nozzle

	{% else %}

		# raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
		{ action_raise_error("Please home your axes!") }
		M117 Please home first!

	{% endif %}